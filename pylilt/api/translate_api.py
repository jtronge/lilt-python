# coding: utf-8

"""
    Lilt REST API

    The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests. ## Authentication Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.   # noqa: E501

    OpenAPI spec version: v2.0
    Contact: support@lilt.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pylilt.api_client import ApiClient


class TranslateApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def register_segment(self, source, srclang, trglang, **kwargs):  # noqa: E501
        """Register a segment  # noqa: E501

        Register a source string for interactive translation. The `source_hash` value that is returned by this request is required by the `prefix` parameter for the translation endpoint. The maximum source length is 5,000 characters. Usage charges apply to this endpoint for production REST API keys.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_segment(source, srclang, trglang, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source: A source string to be registered. (required)
        :param str srclang: An ISO 639-1 language code. (required)
        :param str trglang: An ISO 639-1 language code. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_segment_with_http_info(source, srclang, trglang, **kwargs)  # noqa: E501
        else:
            (data) = self.register_segment_with_http_info(source, srclang, trglang, **kwargs)  # noqa: E501
            return data

    def register_segment_with_http_info(self, source, srclang, trglang, **kwargs):  # noqa: E501
        """Register a segment  # noqa: E501

        Register a source string for interactive translation. The `source_hash` value that is returned by this request is required by the `prefix` parameter for the translation endpoint. The maximum source length is 5,000 characters. Usage charges apply to this endpoint for production REST API keys.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_segment_with_http_info(source, srclang, trglang, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source: A source string to be registered. (required)
        :param str srclang: An ISO 639-1 language code. (required)
        :param str trglang: An ISO 639-1 language code. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source', 'srclang', 'trglang']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source' is set
        if ('source' not in params or
                params['source'] is None):
            raise ValueError("Missing the required parameter `source` when calling `register_segment`")  # noqa: E501
        # verify the required parameter 'srclang' is set
        if ('srclang' not in params or
                params['srclang'] is None):
            raise ValueError("Missing the required parameter `srclang` when calling `register_segment`")  # noqa: E501
        # verify the required parameter 'trglang' is set
        if ('trglang' not in params or
                params['trglang'] is None):
            raise ValueError("Missing the required parameter `trglang` when calling `register_segment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
        if 'srclang' in params:
            query_params.append(('srclang', params['srclang']))  # noqa: E501
        if 'trglang' in params:
            query_params.append(('trglang', params['trglang']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/translate/register', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def translate_segment(self, memory_id, **kwargs):  # noqa: E501
        """Translate a segment  # noqa: E501

        Translate a source string.  Setting the `rich` parameter to `true` will change the response format to include additional information about each translation including a model score, word alignments,  and formatting information. The rich format can be seen in the example response on this page.  By default, this endpoint also returns translation memory (TM) fuzzy matches, along with associated scores. Fuzzy matches always appear ahead of machine translation output in the response.  The maximum source length is 5,000 characters.  Usage charges apply to this endpoint for production REST API keys.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.translate_segment(memory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int memory_id: A unique Memory identifier. (required)
        :param str source: The source text to be translated.
        :param int source_hash: A source hash code.
        :param str prefix: A target prefix.
        :param int n: Return top n translations.
        :param bool rich: Returns rich translation information (e.g., with word alignments).
        :param bool tm_matches: Include translation memory fuzzy matches.
        :return: TranslationList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.translate_segment_with_http_info(memory_id, **kwargs)  # noqa: E501
        else:
            (data) = self.translate_segment_with_http_info(memory_id, **kwargs)  # noqa: E501
            return data

    def translate_segment_with_http_info(self, memory_id, **kwargs):  # noqa: E501
        """Translate a segment  # noqa: E501

        Translate a source string.  Setting the `rich` parameter to `true` will change the response format to include additional information about each translation including a model score, word alignments,  and formatting information. The rich format can be seen in the example response on this page.  By default, this endpoint also returns translation memory (TM) fuzzy matches, along with associated scores. Fuzzy matches always appear ahead of machine translation output in the response.  The maximum source length is 5,000 characters.  Usage charges apply to this endpoint for production REST API keys.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.translate_segment_with_http_info(memory_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int memory_id: A unique Memory identifier. (required)
        :param str source: The source text to be translated.
        :param int source_hash: A source hash code.
        :param str prefix: A target prefix.
        :param int n: Return top n translations.
        :param bool rich: Returns rich translation information (e.g., with word alignments).
        :param bool tm_matches: Include translation memory fuzzy matches.
        :return: TranslationList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['memory_id', 'source', 'source_hash', 'prefix', 'n', 'rich', 'tm_matches']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method translate_segment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'memory_id' is set
        if ('memory_id' not in params or
                params['memory_id'] is None):
            raise ValueError("Missing the required parameter `memory_id` when calling `translate_segment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'memory_id' in params:
            query_params.append(('memory_id', params['memory_id']))  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
        if 'source_hash' in params:
            query_params.append(('source_hash', params['source_hash']))  # noqa: E501
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501
        if 'n' in params:
            query_params.append(('n', params['n']))  # noqa: E501
        if 'rich' in params:
            query_params.append(('rich', params['rich']))  # noqa: E501
        if 'tm_matches' in params:
            query_params.append(('tm_matches', params['tm_matches']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/translate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TranslationList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
